// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
    binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
    engineType      = "binary"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @db.VarChar(30)
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @db.VarChar(30)
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    User
    Trainer
    Ringer
    Admin
}

enum UserStatus {
    Pending
    Contacted
    Lectured
    Trained
    Rejected
    Blocked
}

model User {
    id                   String         @id @default(cuid()) @db.VarChar(30)
    role                 UserRole       @default(User)
    status               UserStatus     @default(Pending)
    email                String?        @unique
    emailVerified        DateTime?
    phoneNumber          String?        @unique
    givenName            String?
    familyName           String?
    pronouns             String?
    image                String?
    region               String?
    supportRoles         String?
    possibleSupportRoles String?
    protestDegree        String?
    accounts             Account[]
    sessions             Session[]
    ringerNotes          RingerNote[]   @relation(name: "user")
    createdRingerNotes   RingerNote[]   @relation(name: "ringer")
    events               Event[]
    createdEvents        Event[]        @relation(name: "createdBy")
    affinityGroupId      String?
    affinityGroup        AffinityGroup? @relation(fields: [affinityGroupId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RingerNote {
    id       String @id @default(cuid()) @db.VarChar(30)
    userId   String
    user     User   @relation(name: "user", fields: [userId], references: [id])
    ringerId String
    ringer   User   @relation(name: "ringer", fields: [ringerId], references: [id])
    text     String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Event {
    id           String   @id @default(cuid()) @db.VarChar(30)
    name         String
    description  String?
    date         DateTime
    location     String?
    maxAttendees Int?
    attendees    User[]
    createdById  String
    createdBy    User     @relation(name: "createdBy", fields: [createdById], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model AffinityGroup {
    id      String @id @default(cuid()) @db.VarChar(30)
    name    String
    members User[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
